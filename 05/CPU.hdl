// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Decode - give every section of the instruction a name
    And(a=true, b=instruction[15], out=CInstruction);
    Not(in=CInstruction, out=AInstruction);
    And(a=true, b=instruction[12], out=aControlBit);

    And(a=true, b=instruction[11], out=c1);
    And(a=true, b=instruction[10], out=c2);
    And(a=true, b=instruction[9], out=c3);
    And(a=true, b=instruction[8], out=c4);
    And(a=true, b=instruction[7], out=c5);
    And(a=true, b=instruction[6], out=c6);

    And(a=true, b=instruction[5], out=destA);
    And(a=true, b=instruction[4], out=destD);
    And(a=true, b=instruction[3], out=destM);

    And(a=true, b=instruction[2], out=j1);
    And(a=true, b=instruction[1], out=j2);
    And(a=true, b=instruction[0], out=j3);

    And(a=j1, b=j2, out=j1andj2);
    And(a=j1, b=j3, out=j1andj3);
    And(a=j2, b=j3, out=j2andj3);
    And(a=j1, b=j2andj3, out=j1andj2andj3);
    Not(in=j2, out=notj2);

    //A or C instruction? - send instruction or ALUOut (respectively) to A Reg 
    Mux16(a=instruction, b=ALUOut, sel=CInstruction, out=ARegIn);

    //Store new value in the A Reg if destA or if A instruction
    Or(a=destA, b=AInstruction, out=loadA);
    ARegister(in=ARegIn, load=loadA, out=A, out[0..14]=addressM);  

    //Store ALU out in D Reg if destD and CInstruction
    And(a=destD, b=CInstruction, out=loadD);
    DRegister(in=ALUOut, load=loadD, out=D);  

    //Select either A or M to forward to ALU according to aControlBit
    Mux16(a=A, b=inM, sel=aControlBit, out=AorM); 
    
    //Send D and (A or M) to ALU along with c1, c2, ..., c6
    ALU(x=D, y=AorM,zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=ALUOut, out=outM, zr=zero, ng=neg);

    //Create more variable describing the nature of ALU out with respect to 0
    Not(in=zero, out=notZero); //ALUOut == 0
    Or(a=zero, b=neg, out=zrOrNeg);
    Not(in=neg, out=zrOrPos); //ALUOut >=0
    And(a=zrOrPos, b=notZero, out=pos); //ALUOut >0


    //Check if any jump cases pass given the nature of ALU out
    And(a=j3, b=pos, out=JGT);
    And(a=j2, b=zero, out=JEQ);
    And(a=j2andj3, b=zrOrPos, out=JGE);
    And(a=j1, b=neg, out=JLT);
    And(a=j1andj3, b=notZero, out=JNE);
    And(a=j1andj2, b=zrOrNeg, out=JLE);
    And(a=j1andj2andj3, b=true, out=JMP);

    //If any jump conditions are met, set JumpCondMet=1
    Or8Way(in[0]=JGT, in[1]=JEQ, in[2]=JGE, in[3]=JLT, in[4]=JNE, in[5]=JLE, in[6]=JMP, in[7]=false, out=JumpCondMet);

    //Ignore the jump if the initial instruction was an A instruction
    And(a=CInstruction, b=JumpCondMet, out=Jump);
    
    //Write new val to M if instruction was a CInstruction and destM == 1 
    And(a=CInstruction, b=destM, out=writeM);
    
    //Update PC based on Jump, A reg value, and incoming reset bit
    PC(in=A, load=Jump, inc=true, reset=reset, out[0..14]=pc);


}